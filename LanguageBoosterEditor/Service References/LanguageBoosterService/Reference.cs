//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LanguageBoosterEditor.LanguageBoosterService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Score", Namespace="http://schemas.datacontract.org/2004/07/LanguageBoosterService")]
    [System.SerializableAttribute()]
    public partial class Score : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlayerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayerName {
            get {
                return this.PlayerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerNameField, value) != true)) {
                    this.PlayerNameField = value;
                    this.RaisePropertyChanged("PlayerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/LanguageBoosterService")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Word", Namespace="http://schemas.datacontract.org/2004/07/LanguageBoosterService")]
    [System.SerializableAttribute()]
    public partial class Word : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuestionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Answer {
            get {
                return this.AnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswerField, value) != true)) {
                    this.AnswerField = value;
                    this.RaisePropertyChanged("Answer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Question {
            get {
                return this.QuestionField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionField, value) != true)) {
                    this.QuestionField = value;
                    this.RaisePropertyChanged("Question");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LanguageBoosterService.LanguageBooster")]
    public interface LanguageBooster {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/GetHighscores", ReplyAction="http://tempuri.org/LanguageBooster/GetHighscoresResponse")]
        LanguageBoosterEditor.LanguageBoosterService.Score[] GetHighscores();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/GetHighscores", ReplyAction="http://tempuri.org/LanguageBooster/GetHighscoresResponse")]
        System.Threading.Tasks.Task<LanguageBoosterEditor.LanguageBoosterService.Score[]> GetHighscoresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/SubmitScore", ReplyAction="http://tempuri.org/LanguageBooster/SubmitScoreResponse")]
        void SubmitScore(LanguageBoosterEditor.LanguageBoosterService.Score NewScore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/SubmitScore", ReplyAction="http://tempuri.org/LanguageBooster/SubmitScoreResponse")]
        System.Threading.Tasks.Task SubmitScoreAsync(LanguageBoosterEditor.LanguageBoosterService.Score NewScore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/CreatePlayer", ReplyAction="http://tempuri.org/LanguageBooster/CreatePlayerResponse")]
        void CreatePlayer(LanguageBoosterEditor.LanguageBoosterService.Player NewPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/CreatePlayer", ReplyAction="http://tempuri.org/LanguageBooster/CreatePlayerResponse")]
        System.Threading.Tasks.Task CreatePlayerAsync(LanguageBoosterEditor.LanguageBoosterService.Player NewPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/GetPlayerHighScore", ReplyAction="http://tempuri.org/LanguageBooster/GetPlayerHighScoreResponse")]
        LanguageBoosterEditor.LanguageBoosterService.Score GetPlayerHighScore(LanguageBoosterEditor.LanguageBoosterService.Player NewPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/GetPlayerHighScore", ReplyAction="http://tempuri.org/LanguageBooster/GetPlayerHighScoreResponse")]
        System.Threading.Tasks.Task<LanguageBoosterEditor.LanguageBoosterService.Score> GetPlayerHighScoreAsync(LanguageBoosterEditor.LanguageBoosterService.Player NewPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/GetNextWord", ReplyAction="http://tempuri.org/LanguageBooster/GetNextWordResponse")]
        LanguageBoosterEditor.LanguageBoosterService.Word GetNextWord(LanguageBoosterEditor.LanguageBoosterService.Player NewPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/GetNextWord", ReplyAction="http://tempuri.org/LanguageBooster/GetNextWordResponse")]
        System.Threading.Tasks.Task<LanguageBoosterEditor.LanguageBoosterService.Word> GetNextWordAsync(LanguageBoosterEditor.LanguageBoosterService.Player NewPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/SubmitWord", ReplyAction="http://tempuri.org/LanguageBooster/SubmitWordResponse")]
        void SubmitWord(LanguageBoosterEditor.LanguageBoosterService.Word NewWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/SubmitWord", ReplyAction="http://tempuri.org/LanguageBooster/SubmitWordResponse")]
        System.Threading.Tasks.Task SubmitWordAsync(LanguageBoosterEditor.LanguageBoosterService.Word NewWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/RemoveWord", ReplyAction="http://tempuri.org/LanguageBooster/RemoveWordResponse")]
        void RemoveWord(LanguageBoosterEditor.LanguageBoosterService.Word NewWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/RemoveWord", ReplyAction="http://tempuri.org/LanguageBooster/RemoveWordResponse")]
        System.Threading.Tasks.Task RemoveWordAsync(LanguageBoosterEditor.LanguageBoosterService.Word NewWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/GetWords", ReplyAction="http://tempuri.org/LanguageBooster/GetWordsResponse")]
        LanguageBoosterEditor.LanguageBoosterService.Word[] GetWords(int Page, int PageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/GetWords", ReplyAction="http://tempuri.org/LanguageBooster/GetWordsResponse")]
        System.Threading.Tasks.Task<LanguageBoosterEditor.LanguageBoosterService.Word[]> GetWordsAsync(int Page, int PageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/GetWordCount", ReplyAction="http://tempuri.org/LanguageBooster/GetWordCountResponse")]
        int GetWordCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LanguageBooster/GetWordCount", ReplyAction="http://tempuri.org/LanguageBooster/GetWordCountResponse")]
        System.Threading.Tasks.Task<int> GetWordCountAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface LanguageBoosterChannel : LanguageBoosterEditor.LanguageBoosterService.LanguageBooster, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LanguageBoosterClient : System.ServiceModel.ClientBase<LanguageBoosterEditor.LanguageBoosterService.LanguageBooster>, LanguageBoosterEditor.LanguageBoosterService.LanguageBooster {
        
        public LanguageBoosterClient() {
        }
        
        public LanguageBoosterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LanguageBoosterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LanguageBoosterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LanguageBoosterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public LanguageBoosterEditor.LanguageBoosterService.Score[] GetHighscores() {
            return base.Channel.GetHighscores();
        }
        
        public System.Threading.Tasks.Task<LanguageBoosterEditor.LanguageBoosterService.Score[]> GetHighscoresAsync() {
            return base.Channel.GetHighscoresAsync();
        }
        
        public void SubmitScore(LanguageBoosterEditor.LanguageBoosterService.Score NewScore) {
            base.Channel.SubmitScore(NewScore);
        }
        
        public System.Threading.Tasks.Task SubmitScoreAsync(LanguageBoosterEditor.LanguageBoosterService.Score NewScore) {
            return base.Channel.SubmitScoreAsync(NewScore);
        }
        
        public void CreatePlayer(LanguageBoosterEditor.LanguageBoosterService.Player NewPlayer) {
            base.Channel.CreatePlayer(NewPlayer);
        }
        
        public System.Threading.Tasks.Task CreatePlayerAsync(LanguageBoosterEditor.LanguageBoosterService.Player NewPlayer) {
            return base.Channel.CreatePlayerAsync(NewPlayer);
        }
        
        public LanguageBoosterEditor.LanguageBoosterService.Score GetPlayerHighScore(LanguageBoosterEditor.LanguageBoosterService.Player NewPlayer) {
            return base.Channel.GetPlayerHighScore(NewPlayer);
        }
        
        public System.Threading.Tasks.Task<LanguageBoosterEditor.LanguageBoosterService.Score> GetPlayerHighScoreAsync(LanguageBoosterEditor.LanguageBoosterService.Player NewPlayer) {
            return base.Channel.GetPlayerHighScoreAsync(NewPlayer);
        }
        
        public LanguageBoosterEditor.LanguageBoosterService.Word GetNextWord(LanguageBoosterEditor.LanguageBoosterService.Player NewPlayer) {
            return base.Channel.GetNextWord(NewPlayer);
        }
        
        public System.Threading.Tasks.Task<LanguageBoosterEditor.LanguageBoosterService.Word> GetNextWordAsync(LanguageBoosterEditor.LanguageBoosterService.Player NewPlayer) {
            return base.Channel.GetNextWordAsync(NewPlayer);
        }
        
        public void SubmitWord(LanguageBoosterEditor.LanguageBoosterService.Word NewWord) {
            base.Channel.SubmitWord(NewWord);
        }
        
        public System.Threading.Tasks.Task SubmitWordAsync(LanguageBoosterEditor.LanguageBoosterService.Word NewWord) {
            return base.Channel.SubmitWordAsync(NewWord);
        }
        
        public void RemoveWord(LanguageBoosterEditor.LanguageBoosterService.Word NewWord) {
            base.Channel.RemoveWord(NewWord);
        }
        
        public System.Threading.Tasks.Task RemoveWordAsync(LanguageBoosterEditor.LanguageBoosterService.Word NewWord) {
            return base.Channel.RemoveWordAsync(NewWord);
        }
        
        public LanguageBoosterEditor.LanguageBoosterService.Word[] GetWords(int Page, int PageSize) {
            return base.Channel.GetWords(Page, PageSize);
        }
        
        public System.Threading.Tasks.Task<LanguageBoosterEditor.LanguageBoosterService.Word[]> GetWordsAsync(int Page, int PageSize) {
            return base.Channel.GetWordsAsync(Page, PageSize);
        }
        
        public int GetWordCount() {
            return base.Channel.GetWordCount();
        }
        
        public System.Threading.Tasks.Task<int> GetWordCountAsync() {
            return base.Channel.GetWordCountAsync();
        }
    }
}
